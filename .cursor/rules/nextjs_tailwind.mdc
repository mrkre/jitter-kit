---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for Next.js & Tailwind CSS Development

## Project Context
This is a modern Next.js 15+ application using App Router, TypeScript 5+, and Tailwind CSS 4+. Follow these rules for consistent, high-quality code.

## Core Principles
- Write clean, type-safe TypeScript code
- Use functional components and React hooks
- Prefer server components by default
- Follow mobile-first responsive design
- Maintain consistent code style across the project

## Next.js Specific Rules

### App Router Conventions
- Use the app directory structure exclusively
- Default to server components unless client interactivity is needed
- Mark client components with 'use client' directive at the top
- Implement proper loading.tsx and error.tsx files for each route
- Use metadata API for SEO optimization

### Data Fetching
- Fetch data in server components when possible
- Use native fetch with Next.js caching options
- Implement proper error boundaries
- Add loading states for better UX
- Cache data appropriately using Next.js cache options

### Performance
- Use next/image for all images with proper width/height
- Implement dynamic imports for code splitting
- Use next/font for optimized font loading
- Minimize client-side JavaScript
- Leverage ISR (Incremental Static Regeneration) when appropriate

## Tailwind CSS 4 Rules

### CRITICAL: Avoid Dynamic Class Names
- **Never concatenate class names dynamically** - Tailwind's JIT compiler needs complete class strings
- Dynamic classes will not be included in the final CSS bundle

```tsx
// ❌ DON'T do this - classes won't be compiled
const Button = ({ color }) => (
  <button className={`bg-${color}-500 text-white`}>{children}</button>
);

// ✅ DO this instead - use complete class strings
function Button({ color, children }) {
  const colorVariants = {
    blue: "bg-blue-600 hover:bg-blue-500 text-white",
    red: "bg-red-500 hover:bg-red-400 text-white",
  };
  
  return <button className={colorVariants[color]}>{children}</button>;
}
```

### Class Organization
- Order: positioning, display, spacing, sizing, typography, colors, effects
- Use consistent spacing scale (4, 8, 12, 16, 24, 32, 48, 64)
- Group related utilities together
- Avoid arbitrary values; use design tokens

### Responsive Design
- Mobile-first approach: base styles for mobile, then sm:, md:, lg:, xl:
- Use container class with responsive padding
- Implement fluid typography with clamp() when needed
- Test all breakpoints during development

### Component Styling
```tsx
// Good: Organized, readable classes
<div className="relative flex items-center justify-between p-4 md:p-6 bg-white dark:bg-gray-800 rounded-lg shadow-sm hover:shadow-md transition-shadow">

// Bad: Disorganized classes
<div className="hover:shadow-md p-4 flex dark:bg-gray-800 md:p-6 relative rounded-lg items-center shadow-sm bg-white justify-between transition-shadow">
```

### Conditional Classes
```tsx
// ✅ Good - toggle complete class strings
export function Example({ gridLayout }) {
  return <div className={gridLayout ? "grid" : "flex"}>{/* ... */}</div>;
}

// ✅ Use clsx/cn for complex conditions
import { cn } from '@/lib/utils'

export function Card({ isActive, isDisabled }) {
  return (
    <div className={cn(
      "p-4 rounded-lg border",
      isActive && "border-blue-500 bg-blue-50",
      isDisabled && "opacity-50 cursor-not-allowed"
    )}>
      {/* ... */}
    </div>
  );
}
```

### Specificity Override
- Use `!` prefix to make utilities important when needed

```tsx
<div className="bg-teal-500 !bg-red-500">
  {/* This will have a red background */}
</div>
```

### Dark Mode
- Always include dark mode variants
- Use dark: prefix for dark mode styles
- Ensure sufficient contrast ratios
- Test both light and dark themes

### Tailwind CSS 4 Modern Syntax

#### Media Queries
```css
/* ❌ Deprecated @screen directive */
@screen sm {
  /* ... */
}

/* ✅ Modern screen() function */
@media screen(sm) {
  /* ... */
}
```

#### Deprecated Classes to Avoid
| Deprecated              | Use Instead                               |
| ----------------------- | ----------------------------------------- |
| `bg-opacity-*`          | Opacity modifiers like `bg-black/50`      |
| `text-opacity-*`        | Opacity modifiers like `text-black/50`    |
| `border-opacity-*`      | Opacity modifiers like `border-black/50`  |
| `flex-grow-*`           | `grow-*`                                  |
| `flex-shrink-*`         | `shrink-*`                                |
| `overflow-ellipsis`     | `text-ellipsis`                           |
| `decoration-clone`      | `box-decoration-clone`                    |

## Import Order Convention

### Required Import Order
Follow this exact order for all TypeScript/React files:

1. **React and Next.js imports**
2. **Third-party library imports** 
3. **Internal imports (components, utilities, etc.)**
4. **Type-only imports** (with `type` keyword)

```tsx
// ✅ Correct import order
import { useState } from 'react'
import { NextPage } from 'next'

import { clsx } from 'clsx'
import { Button } from 'lucide-react'

import { CustomButton } from '@/components/ui/Button'
import { formatDate } from '@/lib/utils'

import type { User } from '@/types/User.types'

// Component implementation
```

```tsx
// ❌ Incorrect - mixed order
import { Button } from 'lucide-react'
import { useState } from 'react'
import { CustomButton } from '@/components/ui/Button'
import type { User } from '@/types/User.types'
```

### Spacing Rules
- Add blank lines between import groups
- No blank lines within import groups
- One blank line after all imports before component code

## TypeScript Guidelines

### Type Safety
- No 'any' types - use 'unknown' if type is truly unknown
- Define interfaces for all props
- Use type inference when obvious
- Export types from .types.ts files
- Prefer interfaces over type aliases for objects

### Component Types
```tsx
// Define props interface above component
interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'ghost'
  size?: 'sm' | 'md' | 'lg'
  children: React.ReactNode
  onClick?: () => void
  disabled?: boolean
  className?: string
}

// Use the interface in component
export function Button({ 
  variant = 'primary',
  size = 'md',
  children,
  onClick,
  disabled = false,
  className
}: ButtonProps) {
  // Implementation
}
```

## Component Patterns

### CRITICAL: Export Standards
- **ALWAYS use named exports** for components (NO default exports)
- Place interfaces/types above component definition
- Add 'use client' directive to ALL interactive components

```tsx
// ✅ CORRECT - Named Export with 'use client'
'use client'

interface ButtonProps {
  variant?: 'primary' | 'secondary'
  children: React.ReactNode
}

export function Button({ variant = 'primary', children }: ButtonProps) {
  return <button className={`btn-${variant}`}>{children}</button>
}
```

```tsx
// ❌ INCORRECT - Default Export
export default function Button() { /* ... */ }
```

### Server Component (Default)
```tsx
// app/posts/page.tsx - Server components can use default exports in app directory
export default async function PostsPage() {
  const posts = await getPosts() // Direct async/await
  
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Posts</h1>
      <PostList posts={posts} />
    </div>
  )
}
```

### Client Component
```tsx
'use client'

import { useState } from 'react'

interface CounterProps {
  initialValue?: number
}

export function Counter({ initialValue = 0 }: CounterProps) {
  const [count, setCount] = useState(initialValue)
  
  return (
    <button 
      onClick={() => setCount(c => c + 1)}
      className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
    >
      Count: {count}
    </button>
  )
}
```

### Client-Only Libraries (P5.js, Chart.js, etc.)
For libraries that don't support SSR, use dynamic imports:

```tsx
import dynamic from 'next/dynamic'
import { Spinner } from './ui'

const P5Sketch = dynamic(() => import('./P5Sketch'), {
  ssr: false,
  loading: () => <Spinner size="lg" />,
})

export function Canvas() {
  return (
    <div className="canvas-container">
      <P5Sketch width={800} height={600} />
    </div>
  )
}
```

### Component Index Files
Create index files for clean imports:

```tsx
// components/index.ts
export { AppShell } from './AppShell'
export { Canvas } from './Canvas'
export { Header } from './Header'
// Re-export UI components
export * from './ui'
```

```tsx
// components/ui/index.ts
export { Button } from './Button'
export { Slider } from './Slider'
export { ColorPicker } from './ColorPicker'
```

### Hybrid Pattern
```tsx
// Server component wrapper
export default async function ProductPage({ params }: { params: { id: string } }) {
  const product = await getProduct(params.id)
  
  return (
    <>
      <ProductDetails product={product} />
      <ProductActions productId={product.id} /> {/* Client component */}
    </>
  )
}
```

## State Management

### Local State
- Use useState for component-specific state
- Use useReducer for complex state logic
- Keep state as close to usage as possible

### Global State
- Use React Context for cross-component state
- Consider Zustand for complex global state
- Avoid prop drilling beyond 2-3 levels

## Form Handling

### React Hook Form Pattern
```tsx
'use client'

import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

const schema = z.object({
  email: z.string().email(),
  password: z.string().min(8)
})

type FormData = z.infer<typeof schema>

export function LoginForm() {
  const { register, handleSubmit, formState: { errors } } = useForm<FormData>({
    resolver: zodResolver(schema)
  })
  
  const onSubmit = async (data: FormData) => {
    // Handle submission
  }
  
  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      {/* Form fields */}
    </form>
  )
}
```

## Error Handling

### Error Boundaries
```tsx
// app/error.tsx
'use client'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div className="flex min-h-screen items-center justify-center">
      <div className="text-center">
        <h2 className="text-2xl font-bold mb-4">Something went wrong!</h2>
        <button
          onClick={reset}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Try again
        </button>
      </div>
    </div>
  )
}
```

## File Organization

### Component Structure
```
components/
├── ui/                 # Base UI components
│   ├── Button.tsx
│   ├── Input.tsx
│   └── Card.tsx
├── features/          # Feature-specific components
│   ├── auth/
│   │   ├── LoginForm.tsx
│   │   └── SignupForm.tsx
│   └── products/
│       ├── ProductCard.tsx
│       └── ProductList.tsx
└── layouts/          # Layout components
    ├── Header.tsx
    └── Footer.tsx
```

## Accessibility

### ARIA Guidelines
- Add proper ARIA labels
- Ensure keyboard navigation
- Maintain focus management
- Use semantic HTML elements
- Test with screen readers

### Focus States
```tsx
// Always include focus-visible states
<button className="... focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2">
```

## Testing Approach
- Write tests for critical user paths
- Test component behavior, not implementation
- Use React Testing Library
- Mock external dependencies
- Aim for high coverage of business logic

## Common Utilities

### Class Name Helper
```tsx
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

### Usage
```tsx
<div className={cn(
  "base-classes",
  condition && "conditional-classes",
  className // Allow override
)} />
```

## Performance Checklist
- [ ] Images optimized with next/image
- [ ] Fonts loaded with next/font
- [ ] Dynamic imports for heavy components
- [ ] Proper loading states
- [ ] Error boundaries implemented
- [ ] Static generation where possible
- [ ] Client components minimized
- [ ] Bundle size monitored

## Code Review Standards
- TypeScript strict mode compliance
- No console.logs in production code
- Proper error handling
- Accessibility standards met
- Mobile-responsive design
- Performance considerations addressed
- Code follows project conventions

## Package Management
- Always use `pnpm` instead of `npm` or `npx`
- Run `pnpm install` to install dependencies
- Use `pnpm add` to add new packages
- Use `pnpm dev` to start development server